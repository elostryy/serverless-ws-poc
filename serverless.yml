service: serverless-ws-test
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-deployment-bucket

custom:
  # params
  stageName: 'test'
  # serverless-offline
  serverless-offline:
    httpPort: ${env:LOCAL_APP_PORT, 3000}
    useChildProcesses: true

  # serverless-dynamodb-local
  dynamodb:
    stages:
      - local
    start:
      port: 8083
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
  
  #api gateway
  apiGatewayUrl:
    Fn::Join:
      - ''
      - - 'https://'
        - Ref: 'ApiGatewayRestApi'
        - '.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stageName}'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  websocketsApiName: custom-websockets-api-name
  websocketsApiRouteSelectionExpression: $request.body.action
  versionFunctions: false
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  role: arn:aws:iam::577152972443:role/ws-test
  deploymentBucket: dri-serverless-ws-lab

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TABLE
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "pk"
            KeyType: "HASH"
        SSESpecification:
          KMSMasterKeyId: ${self:custom.piiKmsKey}
          SSEEnabled: true
          SSEType: "KMS"

functions:
  connectionHandler:
    handler: handler.connectionHandler
    events:
      - websocket:
          route: $connect
          # authorizer:
          #   name: auth
          #   identitySource:
          #     - "route.request.header.Auth"
          #     - "route.request.header.AuthHeader"
      - websocket:
          route: $disconnect
    role: ${self:provider.role}
  defaultHandler:
    handler: handler.defaultHandler
    events:
      - websocket: $default # support all unhandled
    role: ${self:provider.role}
  sendMessage:
    handler: handler.sendMessage
    events:
      - http:
          method: post
          # private: true
          path: message
          cors:
            enabled: true
            origin: "*"
            allowCredentials: true
    role: ${self:provider.role}
    environment:
      API_URL: ${self:custom.apiGatewayUrl, " "}
  auth:
    handler: handler.auth
